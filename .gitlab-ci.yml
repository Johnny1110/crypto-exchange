stages:
    - deploy # 4. 建構 Docker 鏡像與執行容器

.base-job-config: # 基底 job 可提供所有 job 繼承使用
    only:
        - main # 僅限 main 分支才做
    image: golang:latest # 各 job 基底 image
    tags:
      - crypto-runner
    before_script:
        - ls
    interruptible: true # 如果有新的流水線產生，馬上中斷

##############################
#  以下定義 pipline 具體細節
##############################

# deploy
deploy-job:
    stage: deploy
    extends: [.base-job-config]
    cache: [] # no need cache, it turn to artifacts
    variables:
      IMAGE_NAME: exg # 設定鏡像名稱變數
      APP_CONTAINER_NAME: exg # 設定容器名稱變數
      MNT_APP_LOG_PATH: /app/exg/logs
    image: docker:latest # 基底改用 docker
    services:
        - docker:dind # add Docker-in-Docker
    before_script:
        - docker info # 確認 Docker 可用
        - mkdir -p $MNT_APP_LOG_PATH # 確保宿主機目錄存在
        - echo "Cleaning Docker system..."
        - docker system prune -f # 清理未使用的 Docker 資源
        - docker builder prune -f # 清理建構快取
        - df -h # 檢查磁碟空間
    script: #
        - echo "Creating Docker image..."
        - docker build --no-cache -t $IMAGE_NAME .   # 建構鏡像
        - echo "Stop and delete latest container..."
        - docker stop $APP_CONTAINER_NAME || true # 停止容器（如果存在）
        - docker rm $APP_CONTAINER_NAME || true # 刪除容器（如果存在）
        - echo "Boot up new container..."
        - docker run -d -p 8080:8080 -p 8081:8081 -v $MNT_APP_LOG_PATH:/app/logs --net=frizo-net --name $APP_CONTAINER_NAME $IMAGE_NAME # 建立新容器並執行
        - echo "Validating container status..."
        - docker ps | grep $APP_CONTAINER_NAME # 確認容器運行中
    after_script:
        - docker images # 顯示現有鏡像
        - docker ps -a # 顯示所有容器狀態